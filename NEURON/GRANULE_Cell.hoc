begintemplate Grc
public MF_AMPA_L, MF_NMDA_L, Area, GABA_L, MF_L, GOC_L
public MF_AMPA_SL,MF_NMDA_SL,Area,GABA_SL, PF_AMPA_SL, PF_NMDA_SL, PF_KAIN_SL
public CC, targets, GOC_L
public SpikeTrain, coord, nears_glom, myself, nears, selected
public soma
public RT_Vm, time, tmp
public MF_L, GOC_L, AMPA_L, NMDA_L, GABA_L, targets_L, currs, conds, channels
public synapses
public FR, acts, inacts

create soma

objref MF_NMDA_L, MF_AMPA_L, GABA_L, MF_L, GOC_L
objref MF_NMDA_SL, MF_AMPA_SL, GABA_SL, PF_AMPA_SL, PF_NMDA_SL, PF_KAIN_SL
objref CC
objref myself, nears_glom
objref SpikeTrain, nil, netcon, coord
objref targets
objref RT_Vm, time, nears, tmp
objref memb_mechs, memb_pp, MF_L, GOC_L, AMPA_L, NMDA_L, GABA_L, targets_L
objref currs, conds
objref channels, synapses
objref acts, inacts

proc init() {
    coord = new Vector(3)
    coord.x[0] = 0
    coord.x[1] = 0
    coord.x[2] = 0
	
	selected = 0    

	    celltype = 0
	    selected = 0
	    memb_mechs = new Vector()
	    memb_pp = new Vector()
	    targets_L = new List()

    MF_AMPA_L = new List()
    MF_NMDA_L = new List()
    AMPA_L = new List()
    NMDA_L = new List()
    GABA_L = new List()
    
    MF_AMPA_SL = new List()
    MF_NMDA_SL = new List()
    GABA_SL = new List()
    MF_L = new List()
    
    GOC_L = new List()
    
    nears_glom = new List()
    myself = new List()
    nears = new List()
    targets = new List()
    tmp = new Vector()
    
    RT_Vm = new Vector()
    time = new Vector()
    
    create soma
    soma {	
	nseg = 1 
	diam = 9.76 
	L = 9.76 
	cm = 1
	Ra = 100	
	celsius=30		

	    if ($1) {
		channels = new List()
		currs = new List()
		conds = new List()
		acts = new List()
		inacts = new List()
		for i = 0,11 {
		    currs.append(new Vector())
		    conds.append(new Vector())
		    acts.append(new Vector())
		    inacts.append(new Vector())
		}
		channels.append(new String("GRANULE_LKG1"))
		channels.append(new String("GRANULE_LKG2"))
		channels.append(new String("GRANULE_Nmda_leak"))
		channels.append(new String("GRANULE_NA"))
		channels.append(new String("GRANULE_NAR"))
		channels.append(new String("GRANULE_PNA"))
		channels.append(new String("GRANULE_KV"))
		channels.append(new String("GRANULE_KA"))
		channels.append(new String("GRANULE_KIR"))
		channels.append(new String("GRANULE_KCA"))
		channels.append(new String("GRANULE_KM"))
		channels.append(new String("GRANULE_CA"))
		
		synapses = new List()
	    }

	insert GRANULE_LKG1
	insert GRANULE_LKG2
	insert GRANULE_Nmda_leak
	insert GRANULE_NA
	insert GRANULE_NAR
	insert GRANULE_PNA
	insert GRANULE_KV 
	insert GRANULE_KA 
	insert GRANULE_KIR 
	insert GRANULE_KCA
	insert GRANULE_KM
	insert GRANULE_CA
	insert GRANULE_CALC
	
	usetable_GRANULE_NA = 1
	usetable_GRANULE_NAR = 1
	usetable_GRANULE_PNA = 1
	usetable_GRANULE_KV  = 1
	usetable_GRANULE_KA = 1
	usetable_GRANULE_KIR = 1
	usetable_GRANULE_KCA = 0
	usetable_GRANULE_KM = 1
	usetable_GRANULE_CA = 1
	
	ena = 87.39
	ek = -84.69
	eca = 129.33
	ecl = -65
	
	
	SpikeTrain=new Vector()
	netcon=new NetCon(&v(0.5),nil)
	netcon.threshold=-20
	netcon.record(SpikeTrain)
	
	RT_Vm.record(&v(0.5))
	time = new Vector()
	time.record(&t)
	
	Area = PI*diam*L*1e-8
    }
}
	    
endtemplate Grc
